/*
  # Create initial database schema for Alpha PTE & NAATI website

  1. New Tables
    - `courses` - Stores information about available PTE and NAATI courses
    - `testimonials` - Student testimonials and reviews
    - `bookings` - Session booking requests from students
    - `contact_messages` - Messages from the contact form
    - `blog_posts` - Blog content for SEO and information

  2. Security
    - Enable RLS on all tables
    - Add policies for authenticated and anon users
*/

-- Create courses table
CREATE TABLE IF NOT EXISTS courses (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  title TEXT NOT NULL,
  slug TEXT UNIQUE NOT NULL,
  description TEXT NOT NULL,
  course_type TEXT NOT NULL CHECK (course_type IN ('pte', 'naati', 'combined')),
  price DECIMAL(10,2) NOT NULL,
  duration TEXT NOT NULL,
  image_url TEXT,
  features JSONB DEFAULT '[]'::JSONB
);

-- Create testimonials table
CREATE TABLE IF NOT EXISTS testimonials (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  name TEXT NOT NULL,
  image_url TEXT,
  message TEXT NOT NULL,
  rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5),
  course_type TEXT NOT NULL CHECK (course_type IN ('pte', 'naati'))
);

-- Create bookings table
CREATE TABLE IF NOT EXISTS bookings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  name TEXT NOT NULL,
  email TEXT NOT NULL,
  phone TEXT NOT NULL,
  course_id BIGINT REFERENCES courses(id),
  preferred_date TIMESTAMPTZ NOT NULL,
  message TEXT,
  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'cancelled'))
);

-- Create contact_messages table
CREATE TABLE IF NOT EXISTS contact_messages (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  name TEXT NOT NULL,
  email TEXT NOT NULL,
  phone TEXT NOT NULL,
  message TEXT NOT NULL,
  read BOOLEAN DEFAULT FALSE
);

-- Create blog_posts table
CREATE TABLE IF NOT EXISTS blog_posts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  title TEXT NOT NULL,
  slug TEXT UNIQUE NOT NULL,
  excerpt TEXT NOT NULL,
  content TEXT NOT NULL,
  image_url TEXT,
  author TEXT NOT NULL,
  published BOOLEAN DEFAULT FALSE
);

-- Enable RLS on all tables
ALTER TABLE courses ENABLE ROW LEVEL SECURITY;
ALTER TABLE testimonials ENABLE ROW LEVEL SECURITY;
ALTER TABLE bookings ENABLE ROW LEVEL SECURITY;
ALTER TABLE contact_messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE blog_posts ENABLE ROW LEVEL SECURITY;

-- RLS Policies
-- Allow anonymous users to read published courses and testimonials
CREATE POLICY "Allow anonymous to read courses"
  ON courses
  FOR SELECT
  TO anon
  USING (true);

CREATE POLICY "Allow anonymous to read testimonials"
  ON testimonials
  FOR SELECT
  TO anon
  USING (true);

CREATE POLICY "Allow anonymous to read published blog posts"
  ON blog_posts
  FOR SELECT
  TO anon
  USING (published = true);

-- Allow anonymous users to create bookings and contact messages
CREATE POLICY "Allow anonymous to create bookings"
  ON bookings
  FOR INSERT
  TO anon
  WITH CHECK (true);

CREATE POLICY "Allow anonymous to create contact messages"
  ON contact_messages
  FOR INSERT
  TO anon
  WITH CHECK (true);

-- Allow authenticated users (admin) to manage all content
CREATE POLICY "Allow authenticated users to manage courses"
  ON courses
  FOR ALL
  TO authenticated
  USING (true)
  WITH CHECK (true);

CREATE POLICY "Allow authenticated users to manage testimonials"
  ON testimonials
  FOR ALL
  TO authenticated
  USING (true)
  WITH CHECK (true);

CREATE POLICY "Allow authenticated users to manage bookings"
  ON bookings
  FOR ALL
  TO authenticated
  USING (true)
  WITH CHECK (true);

CREATE POLICY "Allow authenticated users to manage contact messages"
  ON contact_messages
  FOR ALL
  TO authenticated
  USING (true)
  WITH CHECK (true);

CREATE POLICY "Allow authenticated users to manage blog posts"
  ON blog_posts
  FOR ALL
  TO authenticated
  USING (true)
  WITH CHECK (true);